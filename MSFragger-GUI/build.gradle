/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/tutorial_java_projects.html
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    id 'idea'
    id 'edu.sc.seis.launch4j' version '2.4.6'

    //id "com.jonaslasauskas.capsule" version "0.3.0"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "com.github.ben-manes.versions" version "0.28.0"
}

group = 'com.github.chhh'
version = '15.1-build33'

description = """FragPipe - run complete proteomics analyses from the GUI"""



java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// Define the main class for the application
def startClass = 'com.dmtavt.fragpipe.Fragpipe'
mainClassName = "${startClass}"
application {
    mainClass = "${startClass}"
}
def releaseDir = 'github-release'

//
//task createStartScripts(type: CreateStartScripts, group: 'release') {
//    outputDir = file('build/github-release')
//    mainClassName = 'umich.msfragger.gui.MsFraggerGui'
//    applicationName = 'FragPipe'
//    executableDir = './'
//    classpath = files("asd/FragPipe-${version}.jar")
//}

repositories {
    mavenCentral()
    mavenLocal()
}

// This is really the important part
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources', 'src']
            excludes = ['*.java']
            //excludes = ['*.java', '*.jar']
        }
    }
    // add tests sources here (this project didn't have them!)
    test {
        java.srcDirs = ['test']
        resources.srcDirs = ["test/resources"]
    }
}

shadowJar {
    archiveBaseName.set("${project.name}")
    archiveClassifier.set('')
    minimize()
}

distributions {
    main {
        //distributionBaseName = 'FragPipe'
        contents {
            from('/') {
                include 'tools/**'
            }
            from('/') {
                include 'workflows/**'
            }
        }
    }
}

// replacing old transitive dependencies with newer ones
//configurations.each {
//    c -> c.resolutionStrategy.dependencySubstitution {
//        all { DependencySubstitution dep ->
//            if (dep.requested.group == 'io.reactivex' && dep.requested.module == 'rxjava') {
//                dep.useTarget 'io.reactivex:rxjava:1.3.8'
//            }
//        }
//    }
//}

dependencies {
    implementation group: 'com.github.albfernandez', name: 'juniversalchardet', version: '2.4.0'
    compileOnly files('tools/batmass-io-1.23.2.jar')
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'one.util:streamex:0.7.3'
    implementation 'org.jooq:jool-java-8:0.9.14'

    implementation 'org.jgrapht:jgrapht-core:1.4.0'
    implementation 'org.jgrapht:jgrapht-io:1.4.0'
    implementation 'org.jgrapht:jgrapht-ext:1.4.0'
    implementation 'com.github.vlsi.mxgraph:jgraphx:4.1.0'

    implementation 'commons-logging:commons-logging-api:1.1'

    implementation 'org.apache.httpcomponents:httpmime:4.5.13'

    implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.20'

    implementation 'org.apache.commons:commons-lang3:3.11'
//    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation 'com.miglayout:miglayout-swing:5.2'

    implementation ('io.reactivex:rxswing:0.27.0'){
        exclude group: 'io.reactivex', module: 'rxjava'
    }
    implementation 'io.reactivex:rxjava:1.3.8'

    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.squareup.okio:okio:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

    // logging
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // downloaded / precompiled jars
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'org.yaml:snakeyaml:1.27' // TMT-Integrator config parsing

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13.1'
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    //all*.exclude group: 'commons-codec', module: 'commons-codec'
}

//capsule {
//  capsuleManifest {
//    applicationId = 'com.github.chhh.FragPipe'
//    applicationClass = 'umich.msfragger.gui.MsFraggerGui'
//  }
//}

test {
    testLogging {
        events "skipped", "failed" // "passed", "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}

task listJars(group: 'chhh-help') {
    doLast {
        configurations.runtimeClasspath.each { File file -> println file.name }
    }
}

task showImplDeps(type: DependencyReportTask, group: 'chhh-help',
        description: "Show only implementation dependencies") {
    configurations = [project.configurations.implementation] as Set
}

task createStartScripts(type: CreateStartScripts, group: "chhh-release") {
    outputDir = file('build/pre-zip-release')
    mainClassName = "${startClass}"
    applicationName = 'FragPipe'
    classpath = files("fragpipe-${project.version}.jar")
}

task makeExeAndCopyToScripts(type: Copy, group: 'chhh-release', description: 'The .exe file ' +
        'created requires to be placed in ./bin/ sub-direcotry of the final distribution and ' +
        'having fragpipe-x.x.x.jar in ./lib/ sub-directory') {
    dependsOn 'createExe'
    from "$buildDir/launch4j/bin"
    into file("$buildDir/scripts")
}

task copyJre(type: Copy, group: 'chhh-release', description: 'Copies JRE to build/install/fragpipe') {
    from "$buildDir/../../jre/OpenJDK11U-jre_x64_windows_hotspot_11.0.9.1_1"
    into file("$buildDir/install/${project.name}")
}

void createTaskCopyToInstallRelToBuild(String taskNameSuffix, String fromRelToBuild, String toRelToInstallProjname) {
    String taskName = "copy" + taskNameSuffix
    task (taskName, type: Copy, group: 'chhh-release', description: "Copies from [$buildDir/$fromRelToBuild] to [$buildDir/install/${project.name}]") {
        from "$buildDir/$fromRelToBuild"
        into file("$buildDir/install/${project.name}/$toRelToInstallProjname")
    }
}

createTaskCopyToInstallRelToBuild('Tools', "../tools", "tools")
createTaskCopyToInstallRelToBuild('Workflows', "../workflows/", "workflows")

void createTaskMakeReleaseZip(boolean withJre, String releaseDir, String startClass) {
    String taskName = "makeReleaseZip" + (withJre ? "WithJre" : "NoJre")

    task (taskName, type: Zip, group: 'chhh-release') {
        // for build on Windows, zip with execute bit
        // for a gradle Windows build, files requiring execute bit set (ELF and Unix shell scripts)
        // are zipped without execute bit. The default file mode is 0644
        // https://github.com/gradle/gradle/blob/54b385133a1edde78243105e9aaf0db5990b3507/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/FileSystemServices.java#L75
        if (Os.isFamily(Os.FAMILY_WINDOWS))
            fileMode = 0755
        dependsOn 'clean'
        dependsOn 'test'
        dependsOn 'makeExeAndCopyToScripts'
        dependsOn 'installDist'
        dependsOn 'copyTools'
        dependsOn 'copyWorkflows'

        tasks.findByName('test').mustRunAfter 'clean'
        tasks.findByName('makeExeAndCopyToScripts').mustRunAfter 'test'
        tasks.findByName('installDist').mustRunAfter 'makeExeAndCopyToScripts'
        tasks.findByName('copyTools').mustRunAfter 'installDist'
        tasks.findByName('copyWorkflows').mustRunAfter 'copyTools'

        if (!withJre) {
            launch4j { // no bundled jre
                mainClassName = "${startClass}"
                icon = "${projectDir}/../logo/msfragger-icon-set_win_16-512.ico"
                outputDir = "launch4j/bin"
                libraryDir = '../lib'
                dontWrapJar = true
                downloadUrl = 'https://adoptopenjdk.net/'
                jreMinVersion = '1.8'
            }
        } else {
            dependsOn 'copyJre'
            tasks.findByName('copyJre').mustRunAfter 'installDist'
            launch4j {
                mainClassName = "${startClass}"
                icon = "${projectDir}/../logo/msfragger-icon-set_win_16-512.ico"
                outputDir = "launch4j/bin"
                libraryDir = '../lib'
                dontWrapJar = true
                downloadUrl = 'https://adoptopenjdk.net/'
                bundledJrePath = "../jre"
                bundledJre64Bit = true
                bundledJreAsFallback = false
            }
        }
        //tasks.findByName('makeExeAndCopyToScripts').mustRunAfter 'clean'

        archiveFileName = (withJre ? "FragPipe-jre-${project.version}.zip" : "FragPipe-${project.version}.zip")
        destinationDirectory = file("$buildDir/$releaseDir")
        from "$buildDir/install"
    }
}

createTaskMakeReleaseZip(true, releaseDir, startClass)
createTaskMakeReleaseZip(false, releaseDir, startClass)

task makeReleaseZips(group: 'chhh-release') {
    dependsOn('clean')
    dependsOn('makeReleaseZipNoJre')
    dependsOn('makeReleaseZipWithJre')

    tasks.findByName('makeReleaseZipNoJre').mustRunAfter 'clean'
    tasks.findByName('makeReleaseZipWithJre').mustRunAfter 'makeReleaseZipNoJre'
}
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}