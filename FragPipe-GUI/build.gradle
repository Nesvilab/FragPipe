/*
 * This file is part of FragPipe.
 *
 * FragPipe is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FragPipe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FragPipe. If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'edu.sc.seis.launch4j' version '3.0.5'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'nebula.lint' version '19.0.1'
}

group = 'org.nesvilab'
version = '23.0-build28'

description = """FragPipe - run complete proteomics analyses from the GUI"""

gradleLint.rules = ['unused-dependency']

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// Define the main class for the application
def startClass = 'org.nesvilab.fragpipe.FragPipeMain'
application {
    mainClass = "${startClass}"
    startScripts {
        classpath = files('lib/*')
    }
}
def releaseDir = 'github-release'

repositories {
    mavenCentral()
    mavenLocal()
}

// This is really the important part
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/main/java']
            excludes = ['*.java']
        }
    }
    // add tests sources here (this project didn't have them!)
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ["src/test/resources"]
    }
}

shadowJar {
    archiveBaseName.set("${project.name}-${project.version}")
    archiveClassifier.set('')
    minimize()
}

distributions {
    main {
        distributionBaseName = "${project.name}-${project.version}"
        contents {
        }
    }
}

// replacing old transitive dependencies with newer ones
//configurations.each {
//    c -> c.resolutionStrategy.dependencySubstitution {
//        all { DependencySubstitution dep ->
//            if (dep.requested.group == 'io.reactivex' && dep.requested.module == 'rxjava') {
//                dep.useTarget 'io.reactivex:rxjava:1.3.8'
//            }
//        }
//    }
//}

dependencies {
    implementation 'com.github.albfernandez:juniversalchardet:2.5.0'
    implementation files("../tools/batmass-io-1.34.6.jar")
    implementation 'com.google.code.gson:gson:2.12.1'
    implementation 'one.util:streamex:0.8.3'
    implementation 'org.jooq:jool-java-8:0.9.15'
    implementation 'org.apache.maven:maven-artifact:3.9.9'
    implementation 'org.jgrapht:jgrapht-core:1.5.2'
    implementation 'com.github.vlsi.mxgraph:jgraphx:4.2.2'

    implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.27.1'

    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'com.miglayout:miglayout-swing:11.4.2'
    implementation 'org.apache.commons:commons-text:1.13.0'

    implementation 'io.reactivex.rxjava3:rxjava:3.1.10'

    implementation 'org.greenrobot:eventbus-java:3.3.1'
    implementation 'org.jsoup:jsoup:1.19.1'
    implementation 'com.squareup.okio:okio:3.10.2'
        implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    implementation 'net.java.balloontip:balloontip:1.2.4.1'
    implementation group: 'org.netbeans.api', name: 'org-netbeans-swing-outline', version: 'RELEASE250'
    implementation 'commons-io:commons-io:2.18.0'

    implementation 'org.apache.parquet:parquet-hadoop:1.15.1'
    implementation 'org.apache.hadoop:hadoop-common:3.4.1'
    implementation 'org.apache.hadoop:hadoop-mapreduce-client-core:3.4.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13.2'
}

test {
    testLogging {
        events "skipped", "failed" // "passed", "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}

task listJars(group: 'fragpipe-help') {
    doLast {
        configurations.runtimeClasspath.each { File file -> println file.name }
    }
}

task showImplDeps(type: DependencyReportTask, group: 'fragpipe-help',
        description: "Show only implementation dependencies") {
    configurations = [project.configurations.implementation] as Set
}

task createStartScripts(type: CreateStartScripts, group: "fragpipe-release") {
    outputDir = file('build/pre-zip-release')
    mainClass = "${startClass}"
    applicationName = 'FragPipe'
    classpath = files("fragpipe-${project.version}.jar")
}

task makeExeAndCopyToScripts(type: Copy, group: 'fragpipe-release', description: 'The .exe file ' +
        'created requires to be placed in ./bin/ sub-direcotry of the final distribution and ' +
        'having fragpipe-x.x.x.jar in ./lib/ sub-directory') {
    dependsOn 'createExe'
    from getLayout().buildDirectory.dir('launch4j/bin').get()
    into getLayout().buildDirectory.dir('scripts').get().asFile
    
    doLast {
        def scriptsDir = getLayout().buildDirectory.dir('scripts').get().asFile
        def oldExe = new File(scriptsDir, 'fragpipe.exe')
        def newExe = new File(scriptsDir, "FragPipe-${project.version}.exe")
        if (oldExe.exists()) {
            oldExe.renameTo(newExe)
        }
    }
}

task copyJre(type: Copy, group: 'fragpipe-release', description: "Copies JRE to build/install/${project.name}-${project.version}") {
    from getLayout().buildDirectory.dir('../../jre/OpenJDK17U-jre_x64_windows_hotspot_17.0.10_7').get()
    into getLayout().buildDirectory.dir("install/${project.name}-${project.version}").get().asFile
}

task copyWorkflows(type: Copy, group: 'fragpipe-release', description: "Copies workflows") {
    from getLayout().buildDirectory.dir("../../workflows/").get()
    into getLayout().buildDirectory.dir("install/${project.name}-${project.version}/workflows").get().asFile
}

task copyToolsWindows(type: Copy, group: 'fragpipe-release', description: "Copies Windows tools") {
    from getLayout().buildDirectory.dir("../../tools").get()
    into getLayout().buildDirectory.dir("install/${project.name}-${project.version}/tools").get().asFile
    exclude { details ->
        details.file.path.contains('linux') ||
        details.file.path.contains('diann_so') ||
        (details.file.name.startsWith('philosopher-') && !details.file.name.endsWith('.exe')) ||
        (details.file.name == 'PTMProphetParser') ||
        (details.file.name.startsWith('SAINTexpress-') && !details.file.name.endsWith('.exe'))
    }
}

task copyToolsLinux(type: Copy, group: 'fragpipe-release', description: "Copies Linux tools") {
    from getLayout().buildDirectory.dir("../../tools").get()
    into getLayout().buildDirectory.dir("install/${project.name}-${project.version}/tools").get().asFile
    exclude { details -> 
        details.file.path.contains('windows') ||
        (details.file.name.endsWith('.exe') && !details.file.path.contains('opair') && !details.file.name.startsWith('Skyline')) ||
        details.file.name.endsWith('.bat')
    }
}

task unpackPythonWindows(type: Copy, group: 'fragpipe-release', description: "Unzips ../../python/python.zip to python") {
    dependsOn 'copyToolsWindows'
    from zipTree(getLayout().buildDirectory.dir("../../python/python.zip").get())
    // tarTree has issues with symlinks, so use zipTree
    // https://github.com/gradle/gradle/pull/182
    into getLayout().buildDirectory.dir("install/${project.name}-${project.version}").get().asFile
}

task copyPythonPackages(type: Copy, group: 'fragpipe-release', description: "Copies Python packages") {
    from getLayout().buildDirectory.dir("../../python/python_packages").get()
    into getLayout().buildDirectory.dir("install/${project.name}-${project.version}/python_packages").get().asFile
}

task makeReleaseZipLinux(type: Zip, group: 'fragpipe-release') {
    // for build on Windows, zip with execute bit
    // for a gradle Windows build, files requiring execute bit set (ELF and Unix shell scripts)
    // are zipped without execute bit. The default file mode is 0644
    // https://github.com/gradle/gradle/blob/54b385133a1edde78243105e9aaf0db5990b3507/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/FileSystemServices.java#L75
    fileMode = 0755
    dependsOn 'clean'
    dependsOn 'test'
    dependsOn 'makeExeAndCopyToScripts'
    dependsOn 'installDist'
    dependsOn 'copyToolsLinux'
    dependsOn 'copyWorkflows'

    tasks.findByName('test').mustRunAfter 'clean'
    tasks.findByName('makeExeAndCopyToScripts').mustRunAfter 'test'
    tasks.findByName('installDist').mustRunAfter 'makeExeAndCopyToScripts'
    tasks.findByName('copyToolsLinux').mustRunAfter 'installDist'
    tasks.findByName('copyWorkflows').mustRunAfter 'copyToolsLinux'

    archiveFileName = "FragPipe-${project.version}-linux.zip"
    destinationDirectory = getLayout().buildDirectory.dir(releaseDir)
    from getLayout().buildDirectory.dir("install")
}

task makeReleaseWindows(type: Copy, group: 'fragpipe-release') {
    dependsOn 'clean'
    dependsOn 'test'
    dependsOn 'makeExeAndCopyToScripts' 
    dependsOn 'installDist'
    dependsOn 'copyToolsWindows'
    dependsOn 'unpackPythonWindows'
    dependsOn 'copyPythonPackages'
    dependsOn 'copyJre'
    dependsOn 'copyWorkflows'

    tasks.findByName('test').mustRunAfter 'clean'
    tasks.findByName('makeExeAndCopyToScripts').mustRunAfter 'test'
    tasks.findByName('installDist').mustRunAfter 'makeExeAndCopyToScripts'
    tasks.findByName('copyJre').mustRunAfter 'installDist'
    tasks.findByName('copyToolsWindows').mustRunAfter 'installDist'
    tasks.findByName('unpackPythonWindows').mustRunAfter 'copyToolsWindows'
    tasks.findByName('copyPythonPackages').mustRunAfter 'unpackPythonWindows'
    tasks.findByName('copyWorkflows').mustRunAfter 'copyToolsWindows'

    launch4j {
        mainClassName = "${startClass}"
        icon = "${projectDir}/../logo/fragpipe-256.ico"
        outputDir = "launch4j/bin"
        libraryDir = '../lib'
        dontWrapJar = true
        downloadUrl = 'https://adoptium.net/temurin/releases/?package=jdk&version=17&arch=x64'
        bundledJrePath = "../jre"
        version = "${project.version}"
        fileDescription = "FragPipe"
        copyright = "Copyright © 2025"
        companyName = "Nesvilab"
        productName = "FragPipe"
    }

    from getLayout().buildDirectory.dir("install")
    into getLayout().buildDirectory.dir("${releaseDir}/FragPipe-${project.version}-windows")
}

task makeReleaseInstaller(type: Exec, group: 'fragpipe-release', description: 'Creates Windows installer using Inno Setup') {
    dependsOn 'makeReleaseWindows'
    
    workingDir = projectDir
    commandLine 'cmd', '/c', 'C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe', 'fragpipe-installer.iss'
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}